6.4.19 
    installed required PIP packages




---------------------------------------------------------------------------------------------
5 Dysfunctions of a Team
    6.4.19 - Read 30 minutes
        First dysfucntion of a team is the abscence of Trust

---------------------------------------------------------------------------------------------
Notes 6.5.19
    - Intro to Software Development
        -Negatives?
            Software is everywhere
            its mostly bad
        
        -Positives?
            profitable
            better than manual labor
            FUN
        
        - Software and its Development
            extremely complex
            Software is always increasing the number of lines of code over many iterations
            It is important to match the programing language to the problem
                ex. statistics would use R or mathmatica for math related problems
            no programing language exists for all problems
                Java was originally meant for embedded systems
            
Notes 6.12.19
    -Python is good at dictionaries, and method references
    
    -Non-Functional requirements 
        -performance
        -real-time performance
        -maintainability
            -readability
            -modularity
    

    -Test Driven Development
        -Unit testing involves testing induvidual methods
        -Integrated development involves testing entire classes
            -This is to see how different methods interact with each other

    -Unit testing
        - Arguably the most important
        - Modern Software Engineering methods use "test first"
            - Write a test
            - Make sure it fails
            - Write just enough code to make it work
        - If you dont know how to test it, how can you write it?
        - Correct frame of mind
        - Needs an equal amount of test code as there is actual code

    - Implementation
        - SE tends to focus on requirements, design, and processes
        - a bad implementation will ruin everything else
    
    - Style
        - Follow language styles
            - eg. "The Elements of Java Style" by, Scott Ambler and Trevor Misfeldt

    - Naming
        - Use good, descriptive names

    - Tests
        - Tests must be easy to run and run alot

    - Use Libraries
        - Developed and tested by many others
        - Don't reimplement
            - You need to learn what is possible
            - Yes, yeo may know how and think you are better, but you are not
            - Write something else no one has written 
    - Reviews
        - Code reviews are very effective for improving quality
        - Knowing someone else is looking affects you
        - Others know things you dont
    - Other guidelines
        - DRY: Dont repeat yourself
            -refers to repeating code
    
    - Agile code development
        - Many different processes that emphasize short release cycles 
            that allow changes in design
        - Focus on human and team aspects

    - 